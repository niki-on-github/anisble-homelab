version: '3.7'

networks:
  default:
    external: true
    name: docker-bridge

services:

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    labels:
      com.centurylinklabs.watchtower.enable: "true"
      traefik.enable: "true"
      traefik.docker.network: "docker-bridge"
      traefik.constraints: "homelab"
      traefik.http.routers.grafana.middlewares: "iframe-header@file"
      traefik.http.routers.grafana.tls: "true"
      traefik.http.routers.grafana.rule: "Host(`grafana.{{ domain }}`)"
      traefik.http.routers.grafana.service: "grafana"
      traefik.http.services.grafana.loadbalancer.server.port: "3000"
    networks:
      - default
    depends_on:
      - influxdb
    volumes:
      - "{{ docker_data }}/monitoring-services/grafana:/var/lib/grafana:rw"


  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    restart: unless-stopped
    labels:
      com.centurylinklabs.watchtower.enable: "true"
      traefik.enable: "true"
      traefik.docker.network: "docker-bridge"
      traefik.constraints: "homelab"
      traefik.http.routers.influxdb.tls: "true"
      traefik.http.routers.influxdb.rule: "Host(`influxdb.{{ domain }}`)"
      traefik.http.routers.influxdb.service: "influxdb"
      traefik.http.services.influxdb.loadbalancer.server.port: "8086"
    networks:
      - default
    volumes:
      - "{{ docker_data }}/monitoring-services/influxdb:/var/lib/influxdb:rw"
    environment:
      INFLUXDB_DB: "opnsense-telegraf"
      INFLUXDB_ADMIN_USER: "root"
      INFLUXDB_ADMIN_PASSWORD: "{{ webservices_password }}"


  postgres:
    container_name: postgres
    image: postgres:10
    restart: unless-stopped
    networks:
      - default
    volumes:
      - "{{ docker_data }}/monitoring-services/postgres:/var/lib/postgresql/data:rw"
    labels:
      com.centurylinklabs.watchtower.enable: "true"
      traefik.enable: "true"
      traefik.docker.network: "docker-bridge"
      traefik.constraints: "homelab"
      traefik.http.routers.postgres.tls: "true"
      traefik.http.routers.postgres.rule: "Host(`postgres.{{ domain }}`)"
      traefik.http.routers.postgres.service: "postgres"
      traefik.http.services.postgres.loadbalancer.server.port: "5432"
    environment:
      POSTGRES_PASSWORD: "{{ webservices_password }}"
      POSTGRES_USER: "root"
      POSTGRES_DB: "db"


  uptime_kuma:
    container_name: uptime-kuma
    image: louislam/uptime-kuma:1
    restart: unless-stopped
    networks:
      - default
    volumes:
      - "{{ docker_data }}/monitoring-services/uptime-kuma:/app/data"
    labels:
      com.centurylinklabs.watchtower.enable: "true"
      traefik.enable: "true"
      traefik.docker.network: "docker-bridge"
      traefik.constraints: "homelab"
      traefik.http.routers.uptime.middlewares: "iframe-header@file"
      traefik.http.routers.uptime.tls: "true"
      traefik.http.routers.uptime.rule: "Host(`uptime.{{ domain }}`)"
      traefik.http.routers.uptime.service: "uptime"
      traefik.http.services.uptime.loadbalancer.server.port: "3001"


  telegraf:
    image: telegraf
    container_name: telegraf
    restart: unless-stopped
    user: "telegraf:{{ docker_gid }}"
    networks:
      - default
    depends_on:
      - influxdb
    labels:
      com.centurylinklabs.watchtower.enable: "true"
    environment:
      HOST_PROC: /rootfs/proc
      HOST_SYS: /rootfs/sys
      HOST_ETC: /rootfs/etc
      HOST_RUN: /rootfs/run
      HOST_VAR: /rootfs/var
      HOST_MOUNT_PREFIX: /rootfs
    hostname: server
    volumes:
      - "{{ docker_data }}/monitoring-services/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro"
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /:/rootfs:ro
