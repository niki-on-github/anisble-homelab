---
- name: "Create OPNsense directories"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
  with_items:
    - "{{ vagrant_recipes }}/opnsense"

- name: "Copy provisioning files"
  copy:
    src: "files/ansible"
    dest: "{{ vagrant_recipes }}/opnsense"
    owner: "{{ uid }}"
    group: "{{ gid }}"
    mode: 0755

- name: "Generate OPNsense vagrant file"
  template:
    src: Vagrantfile.j2
    dest: "{{ vagrant_recipes }}/opnsense/Vagrantfile"

- name: "Generate OPNsense provisioning playbook"
  template:
    src: playbook.yml.j2
    dest: "{{ vagrant_recipes }}/opnsense/ansible/playbook.yml"

- name: "Checking if OPNsense is already provisioned"
  stat:
    path: "{{ vagrant_recipes }}/opnsense/.vagrant/machines/default/libvirt/private_key"
  register: provisioning_check

- name: "Check if pxe-server exists"
  docker_container_info:
    name: "pxe-server"
  register: pxe_server_info

- name: "Stop pxe server if running (conflicting port)"
  docker_container:
    name: "pxe-server"
    state: stopped
  register: pxe_server
  when: pxe_server_info.exists

- name: "Deploy OPNsense (this can take some time)"
  ansible.builtin.shell:
    cmd: vagrant up
    chdir: "{{ vagrant_recipes }}/opnsense"
  register: opnsense_deploy
  when: "not provisioning_check.stat.exists"
  become: yes

- debug:
    msg:
      - "{{ opnsense_deploy.stdout.split('\n') }}"
      - "{{ opnsense_deploy.stderr.split('\n') }}"
  when: "not provisioning_check.stat.exists"

- name: "Stop OPNsense"
  community.libvirt.virt:
    name: "opnsense_default"
    state: shutdown
  when: "not provisioning_check.stat.exists"

- name: "Wait for OPNsense shutdown"
  wait_for:
    timeout: 30
  delegate_to: localhost
  when: "not provisioning_check.stat.exists"

- name: "Remove vagrant-libvirt network from OPNsense box"
  community.general.xml:
    path: "/etc/libvirt/qemu/opnsense_default.xml"
    xpath: "/domain/devices/interface[@type='network']"
    state: absent
    pretty_print: yes
  become: yes

- name: "Add OPNsense KVM to autostart"
  community.libvirt.virt:
    name: "opnsense_default"
    autostart: yes
  become: yes

- name: "Reload OPNsense configuration"
  shell:
    cmd: virsh define /etc/libvirt/qemu/opnsense_default.xml
    chdir: "{{ vagrant_recipes }}/opnsense"
  become: yes

- name: "Start OPNsense with new configuration"
  community.libvirt.virt:
    name: "opnsense_default"
    state: running

- name: "Download vagrant SSH private key for OPNsense"
  fetch:
    src: "{{ vagrant_recipes }}/opnsense/.vagrant/machines/default/libvirt/private_key"
    dest: "{{ role_path }}/../../../../files/opnsense/private_key"
    flat: yes
  become: yes

- name: "Start pxe server if running before"
  docker_container:
    name: "pxe-server"
    state: started
  register: pxe_server
  when: pxe_server_info.exists and pxe_server.changed
