version: "3"

networks:
  default:
    external: true
    name: docker-bridge

services:

  drone-server:
    container_name: drone
    image: drone/drone:2
    restart: unless-stopped
    environment:
      DRONE_DATABASE_DRIVER: "sqlite3"
      DRONE_DATABASE_DATASOURCE: "/data/database.sqlite"
      DRONE_GITEA_SERVER: "https://git.{{ domain }}"
      DRONE_GIT_ALWAYS_AUTH: "false"
      DRONE_GITEA_SKIP_VERIFY: "true"
      DRONE_SERVER_PROTO: "https"
      DRONE_SERVER_HOST: "drone.{{ domain }}"
      DRONE_TLS_AUTOCERT: "false"
      DRONE_USER_CREATE: "root"
      DRONE_GITEA_CLIENT_ID: "{{ drone_gitea_oauth2_client_id }}"
      DRONE_GITEA_CLIENT_SECRET: "{{ drone_gitea_oauth2_client_secret }}"
    env_file:
      - .env
    labels:
      com.centurylinklabs.watchtower.enable: "true"
      traefik.enable: "true"
      traefik.docker.network: "docker-bridge"
      traefik.constraints: "{{ traefik_constraints_local_services }}"
      traefik.http.routers.drone.middlewares: "iframe-header@file,auth@file"
      traefik.http.routers.drone.tls: "true"
      traefik.http.routers.drone.rule: "Host(`drone.{{ domain }}`)"
      traefik.http.routers.drone.service: "drone"
      traefik.http.services.drone.loadbalancer.server.port: "80"
    networks:
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "{{docker_data}}/drone:/data"

  drone-runner:
    container_name: drone-runner
    image: drone/drone-runner-docker:1
    restart: unless-stopped
    depends_on:
      drone-server:
        condition: service_started
    environment:
      DRONE_RPC_PROTO: "http"
      DRONE_RPC_HOST: "drone-server"
      DRONE_RUNNER_NAME: "drone-runner"
      DRONE_RUNNER_CAPACITY: 2
      DRONE_RUNNER_NETWORKS: "docker-bridge"
      DRONE_DEBUG: "true"
      DRONE_TRACE: "true"
      DRONE_RUNNER_VOLUMES: "/etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt"
    env_file:
      - .env
    labels:
      com.centurylinklabs.watchtower.enable: "true"
    networks:
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
