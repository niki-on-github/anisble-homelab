- block:
  # root

  - name: "Verify that required role variables are defined"
    assert:
      that:
        - "{{ role_var }} is defined"
        - "{{ role_var }} | length > 0"
        - "{{ role_var }} != None"
      fail_msg: "{{ role_var }} needs to be set!"
      success_msg: "Required variable {{ role_var }} is defined"
    loop_control:
      loop_var: role_var
    with_items:
      - k3s_cluster_secret
      - flux_repo_ssh_url
      - flux_repo_private_key

- block:
  # archlinux, root

  - name: 'Update archlinux-keyring'
    pacman:
      name: 'archlinux-keyring'
      state: latest
      update_cache: yes

  - name: 'Install kubernetes packages from arch repositories'
    package:
      name: "{{ k3s_packages }}"
      state: latest

  - name: 'Enable iscsid systemd service'
    systemd:
      name: 'iscsid'
      state: 'started'
      enabled: 'yes'

  - name: 'Enable prometheus-node-exporter systemd service'
    systemd:
      name: 'prometheus-node-exporter'
      state: 'started'
      enabled: 'yes'

  - name: 'Install kubernetes AUR packages'
    kewlfft.aur.aur:
      name: "{{ k3s_aur_packages }}"
    become_user: "{{ username }}"

  - name: "Generate k3s service env file"
    template:
      src: k3s.service.env.j2
      dest: "/etc/systemd/system/k3s.service.env"

  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/
  - name: "Set default k3s start configuration"
    lineinfile:
      path: /usr/lib/systemd/system/k3s.service
      regexp: '^ExecStart='
      line: ExecStart=/usr/bin/k3s server --disable=traefik,local-storage,metrics-server --kube-apiserver-arg='enable-admission-plugins=DefaultStorageClass,DefaultTolerationSeconds,LimitRanger,MutatingAdmissionWebhook,NamespaceLifecycle,NodeRestriction,PersistentVolumeClaimResize,Priority,ResourceQuota,ServiceAccount,TaintNodesByCondition,ValidatingAdmissionWebhook'

  - name: 'Enable k3s systemd service'
    systemd:
      name: 'k3s'
      state: 'started'
      enabled: 'yes'
      daemon_reload: yes

  become: true
  when: ansible_facts['distribution'] == 'Archlinux'


- block:
  # root
  - name: 'Enable k3s systemd service'
    systemd:
      name: 'k3s'
      state: 'started'
      enabled: 'yes'
      daemon_reload: yes

  become: true


- block:
  # root
  - name: 'Create k3s directories'
    file:
      dest: "{{ item }}"
      state: directory
      owner: "{{ username }}"
      recurse: no
    with_items:
       - "{{ k3s_home }}"
       - "{{ k3s_home }}/.age"

  - name: "Get longhorn storage dir stat"
    stat:
      path: /var/lib/longhorn
    register: longhorn_dir

  - name: "Btrfs check"
    shell:
      cmd: cat /proc/mounts | grep " / " | grep -q "btrfs"
    register: btrfs_check
    failed_when: false

  - name: "Create /var/lib/longhorn btrfs subvolume"
    shell:
      cmd: btrfs subvolume create /var/lib/longhorn
    when: not longhorn_dir.stat.exists and btrfs_check.rc == 0

  - name: 'Create longhorn directories'
    file:
      dest: "{{ item }}"
      state: directory
      owner: "{{ username }}"
      recurse: no
    with_items:
       - "{{ longhorn_data_dir }}"

  become: yes


- block:
  # user

  - name: 'Create k3s directories'
    file:
      dest: "{{ item }}"
      state: directory
      owner: "{{ username }}"
      recurse: no
    with_items:
       - "/home/{{ username }}/.kube"
       - "/home/{{ username }}/.config/sops/age"
       - "/home/{{ username }}/.config/k9s"

  - name: "Copy k9s config to user directory"
    copy:
      src: "k9s/config.yml"
      dest: "/home/{{ username }}/.config/k9s/config.yml"
      owner: "{{ username }}"

  - name: "Copy k3s config to user directory"
    copy:
      src: "/etc/rancher/k3s/k3s.yaml"
      dest: "/home/{{ username }}/.kube/config"
      owner: "{{ username }}"
      remote_src: true
    become: yes

  - name: "Get age key stat"
    stat:
      path: "{{ k3s_home }}/.age/sops.agekey"
    register: flux_secret_key

  - name: "Generate age key"
    command:
      cmd: age-keygen -o sops.agekey
      chdir: "{{ k3s_home }}/.age"
    when: not flux_secret_key.stat.exists

  - name: "Get Public Key"
    shell:
      cmd: "grep 'public key' {{ k3s_home }}/.age/sops.agekey | cut -d ':' -f 2 | tr -d ' '"
      chdir: "{{ k3s_home }}/.age"
    register: flux_age_public_key

  - name: "Get Private Key"
    shell:
      cmd: "grep 'AGE-SECRET-KEY' {{ k3s_home }}/.age/sops.agekey"
      chdir: "{{ k3s_home }}/.age"
    register: flux_age_private_key

  - name: "Add age key to /home/{{ username }}/.config/sops/age/keys.txt"
    lineinfile:
      dest: "/home/{{ username }}/.config/sops/age/keys.txt"
      line: "{{ flux_age_private_key.stdout }}"
      create: true

  - name: "Clone flux repository"
    git:
      repo: "{{ flux_repo_ssh_url }}"
      dest: "{{ k3s_home }}/gitops"
      clone: yes
      update: yes
      force: yes
      accept_hostkey: yes
      key_file: "{{ flux_repo_private_key }}"

  - name: "Temporary remove password from ca key"
    shell:
      cmd: 'echo "{{ webservices_password }}" | openssl rsa -in ca.key -out ca2.key -passin stdin'
      chdir: "{{ certs_path }}"

  - name: "Create kubernetes ca certs secret"
    shell:
      cmd: "kubectl -n networking create secret generic internal-ca --dry-run=client --from-file=tls.crt=./ca.crt --from-file=tls.key=./ca2.key -o yaml > ca-certs.yaml"
      chdir: "{{ certs_path }}"

  - name: "Delete temporary ca key without passphrase"
    file:
      state: absent
      path: "{{ certs_path }}/ca2.key"

  - name: "Encrypt kubernetes ca certs secret"
    shell:
      cmd: "sops --age={{ flux_age_public_key.stdout }} --encrypt --encrypted-regex '^(data|stringData)$' --in-place ca-certs.yaml"
      chdir: "{{ certs_path }}"

  #NOTE: We import the age secret in taskfile of flux repo!
