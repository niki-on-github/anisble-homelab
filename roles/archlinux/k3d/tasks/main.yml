- block:
  # root

  - name: "Verify that required role variables are defined"
    assert:
      that:
        - "{{ role_var }} is defined"
        - "{{ role_var }} | length > 0"
        - "{{ role_var }} != None"
      fail_msg: "{{ role_var }} needs to be set!"
      success_msg: "Required variable {{ role_var }} is defined"
    loop_control:
      loop_var: role_var
    with_items:
      - k3s_cluster_secret
      - flux_repo_ip
      - flux_repo_ssh_hostname
      - flux_repo_ssh_url
      - flux_repo_private_key

  - name: 'Update archlinux-keyring'
    pacman:
      name: 'archlinux-keyring'
      state: latest
      update_cache: yes

  - name: 'Install kubernetes packages from arch repositories'
    package:
      name: "{{ k3d_packages }}"
      state: latest

  - name: 'Install kubernetes AUR packages'
    kewlfft.aur.aur:
      name: "{{ k3d_aur_packages }}"
    become_user: "{{ username }}"

  - name: 'Create k3d directories'
    file:
      dest: "{{ item }}"
      state: directory
      owner: "{{ username }}"
      recurse: no
    with_items:
       - "/opt/k3d"
       - "/opt/k3d/data"
       - "/opt/k3d/.age"

  - name: "Generate k3d cluster-config"
    template:
      src: cluster-config.yaml.j2
      dest: "/opt/k3d/cluster-config.yaml"
      owner: "{{ username }}"

  - name: "Add domain to /etc/hosts"
    lineinfile:
      path: /etc/hosts
      line: "127.0.0.1 {{ domain }}"

  become: yes


- block:
  # user

  - name: 'Create k3d directories'
    file:
      dest: "{{ item }}"
      state: directory
      owner: "{{ username }}"
      recurse: no
    with_items:
       - "/home/{{ username }}/.kube"
       - "/home/{{ username }}/.config"
       - "/home/{{ username }}/.config/sops"
       - "/home/{{ username }}/.config/sops/age"

  - name: "Get age key stat"
    stat:
      path: "/opt/k3d/.age/sops.agekey"
    register: flux_secret_key

  - name: "Generate age key"
    command:
      cmd: age-keygen -o sops.agekey
      chdir: "/opt/k3d/.age"
    when: not flux_secret_key.stat.exists

  - name: "Get Public Key"
    shell:
      cmd: grep "public key" /opt/k3d/.age/sops.agekey | cut -d ':' -f 2 | tr -d ' '
      chdir: "/opt/k3d/.age"
    register: flux_age_public_key

  - name: "Get Private Key"
    shell:
      cmd: grep "AGE-SECRET-KEY" /opt/k3d/.age/sops.agekey
      chdir: "/opt/k3d/.age"
    register: flux_age_private_key

  - name: "Add age key to /home/{{ username }}/.config/sops/age/keys.txt"
    lineinfile:
      dest: "/home/{{ username }}/.config/sops/age/keys.txt"
      line: "{{ flux_age_private_key.stdout }}"
      create: true

  - name: "Get K3S cluster list"
    command:
      cmd: "k3d cluster list"
      chdir: "/opt/k3d"
    register: k3d_cluster_list

  - name: "Deploy K3S cluster"
    command:
      cmd: "k3d cluster create --config cluster-config.yaml"
      chdir: "/opt/k3d"
    when: not k3d_cluster_name in k3d_cluster_list.stdout

  - name: "Clone flux repository"
    git:
      repo: "{{ flux_repo_ssh_url }}"
      dest: "/opt/k3d/infra"
      clone: yes
      update: yes
      force: yes
      accept_hostkey: yes
      key_file: "{{ flux_repo_private_key }}"

  #NOTE: We set secret in taskfile of flux repo!

  - name: "Create kubernetes certs secret"
    shell:
      cmd: "kubectl -n ingress create secret generic certs --dry-run=client --from-file=tls.crt=./{{ domain }}.crt --from-file=tls.key=./{{ domain }}.key -o yaml > domain-certs.yaml"
      chdir: "{{ certs_path }}"

  # TODO: Secret/ingress/certs validation error: error decoding from json: illegal base64 data at input byte 3
  # - name: "Encrypt flux certs secret"
  #   shell:
  #     cmd: "sops --age={{ flux_age_public_key.stdout }} --encrypt --encrypted-regex '^(data|stringData)$' domain-certs.yaml > domain-certs.sops.yaml"
  #     chdir: "{{ certs_path }}"

  # NOTE: does not work cant resolve the git url!!
  # - name: "Flux Bootstrap"
  #   shell:
  #     cmd: "go-task cluster:install"
  #     chdir: "/opt/k3d/infra"

  - name: "Get flux status"
    command:
      cmd: flux get all
    register: flux_status


